name: Build
on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --features vendored

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - run: rustup override set nightly
      - run: rustup component add rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --check

  test:
    name: Test Suite and Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            ext: ""
          # - os: macos-latest
          #   ext: ""
          # - os: windows-latest
          #   ext: ".exe"
    env:
      BIN_NAME: warden
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2

      - name: Get crate version from Cargo.toml
        shell: bash
        run: |
          version=$(cargo metadata --no-deps --format-version 1 | jq -r --arg bin "$BIN_NAME" '
            .packages[]
            | select(any(.targets[]; .name==$bin and (.kind | index("bin"))))
            | .version' | head -n1)
          echo "CRATE_VERSION=$version" >> "$GITHUB_ENV"

      - run: cargo test --workspace --features vendored

      - name: Build release binaries
        run: cargo build --release --bin $BIN_NAME --features vendored

      - name: Upload release binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.os }}-v${{ env.CRATE_VERSION }}
          path: target/release/${{ env.BIN_NAME }}${{ matrix.ext }}
          if-no-files-found: error
          retention-days: 7

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-targets --features vendored -- -D warnings
      - run: cargo doc --no-deps --workspace --document-private-items --features vendored
        env:
          RUSTDOCFLAGS: -D warnings
